{"version":3,"sources":["App.js","reportWebVitals.js","index.js","imcc.svg"],"names":["App","tableData","setTableData","useState","currentTime","setCurrentTime","Date","useEffect","today","month","String","getMonth","padStart","fileName","getDate","console","log","fetch","then","response","json","data","catch","error","timer","setInterval","clearInterval","englishDate","toLocaleDateString","weekday","year","day","arabicDate","index","nextTimeIndex","timeDifference","remainingTime","prayerName","getNextTimeIndex","currentTimeInSeconds","toTimeString","split","reduce","acc","time","i","rows","length","rowAdhanTimeString","rowIqamahTimeString","rowAdhanTimeInSeconds","rowIqamahTimeInSeconds","Math","abs","rowTimeString","rowTimeInSeconds","formattedRemainingTime","seconds","hrs","floor","mins","secs","toString","formatRemainingTime","React","createElement","className","src","logo","alt","toLocaleTimeString","map","row","rowIndex","key","data-label","header1","header2","colSpan","Fragment","header3","reportWebVitals","onPerfEntry","Function","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","module","exports"],"mappings":"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","file":"static/js/main.23f145a9.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport logo from './imcc.svg'; // Import the logo\nimport Papa from 'papaparse';\n\nfunction App() {\n    const [tableData, setTableData] = useState(null);\n    const [currentTime, setCurrentTime] = useState(new Date());\n\n    useEffect(() => {\n        const today = new Date();\n        const month = String(today.getMonth() + 1).padStart(2, '0');\n        const date = String(today.getDate()).padStart(2, '0');\n        const fileName = `${date}.json`;\n        console.log(fileName, month)\n        const baseUrl = process.env.PUBLIC_URL;\n\n        //     reading a sample file for now\n        // fetch(`${baseUrl}/prayertime/${month}/${fileName}`)\n        console.log(`${baseUrl}/prayertime/03/abcd.json`)\n        console.log(`${baseUrl}/prayertime/${month}/${fileName}`)\n        fetch(`${baseUrl}/prayertime/03/20.json`)\n            .then(response => response.json())\n            .then(data => setTableData(data))\n            .catch(error => console.error('Error fetching data:', error));\n\n        // fetch(`${baseUrl}/prayertime/03.csv`)\n        //     .then(response => response.text())\n        //     .then(csvData => {\n        //         Papa.parse(csvData, {\n        //             header: true,\n        //             skipEmptyLines: true,\n        //             complete: (result) => {\n        //                 const selectedRows = [result.data[0], result.data[date]];\n        //                 console.log(selectedRows); // Log the selected rows\n        //                 // setTableData(result.data);\n        //             },\n        //             error: (error) => {\n        //                 console.error('Error parsing CSV data:', error);\n        //             }\n        //         });\n        //     })\n        //     .catch(error => console.error('Error fetching data:', error));\n    }, []);\n\n    useEffect(() => {\n        const timer = setInterval(() => {\n            setCurrentTime(new Date());\n        }, 1000);\n        return () => clearInterval(timer);\n    }, []);\n\n    const englishDate = currentTime.toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' });\n    const arabicDate = currentTime.toLocaleDateString('en-GB-u-ca-islamic', { day: 'numeric', month: 'long', year: 'numeric' });\n\n    const getNextTimeIndex = () => {\n        if (!tableData) return -1;\n        const currentTimeString = currentTime.toTimeString().split(' ')[0];\n        const currentTimeInSeconds = currentTimeString.split(':').reduce((acc, time) => (60 * acc) + +time);\n\n\n        for (let i = 0; i < tableData.rows.length; i++) {\n            const rowAdhanTimeString = tableData.rows[i][1] + \":00\";\n            const rowIqamahTimeString = tableData.rows[i][2] + \":00\";\n            const prayerName = tableData.rows[i][0];\n            const rowAdhanTimeInSeconds = rowAdhanTimeString.split(':').reduce((acc, time) => (60 * acc) + +time);\n            const rowIqamahTimeInSeconds = rowIqamahTimeString.split(':').reduce((acc, time) => (60 * acc) + +time);\n            if (rowAdhanTimeInSeconds > currentTimeInSeconds) {\n                const timeDifference = Math.abs(rowAdhanTimeInSeconds - currentTimeInSeconds);\n                return { index: i, timeDifference, prayerName:prayerName };\n                // return i;\n            }\n            else if (rowAdhanTimeInSeconds < currentTimeInSeconds &&  rowIqamahTimeInSeconds > currentTimeInSeconds) {\n                const timeDifference = Math.abs(rowIqamahTimeInSeconds - currentTimeInSeconds);\n                return { index: i, timeDifference, prayerName: `${prayerName} IQAMAH` };\n            }\n        }\n\n        // because after Isha finish it should show fajr time, first row\n        const rowTimeString = tableData.rows[0][1] + \":00\";\n        const prayerName = tableData.rows[0][0];\n        const rowTimeInSeconds = rowTimeString.split(':').reduce((acc, time) => (60 * acc) + +time);\n        const timeDifference = \"24:00:00\".split(':').reduce((acc, time) => (60 * acc) + +time) + rowTimeInSeconds - currentTimeInSeconds;\n        return { index: 0, timeDifference, prayerName:prayerName };\n\n    };\n\n    const { index: nextTimeIndex, timeDifference: remainingTime, prayerName} = getNextTimeIndex();\n\n    const formatRemainingTime = (seconds) => {\n        const hrs = Math.floor(seconds / 3600);\n        const mins = Math.floor((seconds % 3600) / 60);\n        const secs = seconds % 60;\n        return `${hrs.toString().padStart(2, '0')}:${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n    };\n\n    const formattedRemainingTime = formatRemainingTime(remainingTime);\n\n    console.log(\"formattedRemainingTime\", formattedRemainingTime, prayerName);\n\n\n    if (!tableData) {\n        return <div>Prayer Time Not Available.</div>;\n    }\n\n    return (\n        <div className=\"App\">\n            <div className=\"App-header\">\n                <img src={logo} alt=\"IMCC Logo\" className=\"logo\" />\n                <div className=\"date-english\">{englishDate}</div>\n                <div className=\"current-time\">{currentTime.toLocaleTimeString()}</div>\n                <div className=\"date-arabic\">{arabicDate}</div>\n                <div className=\"remaining-time\">{prayerName}  {formattedRemainingTime}</div>\n            </div>\n            <main className=\"App-main\">\n                <table className=\"App-table\">\n                    <thead>\n                    <tr>\n                        <th>PRAYER</th>\n                        <th>ADHAN</th>\n                        <th>IQAMAH</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {tableData.rows.map((row, rowIndex) => (\n                        <tr key={rowIndex} className={rowIndex === nextTimeIndex ? 'bold-colored-row' : ''}>\n                            <td data-label={tableData.header1}>{row[0]}</td>\n                            {rowIndex === 1 ? (\n                                <td data-label={tableData.header2} colSpan=\"2\">{row[1]}</td>\n                            ) : (\n                                <>\n                                    <td data-label={tableData.header2}>{row[1]}</td>\n                                    {row[2] && <td data-label={tableData.header3}>{row[2]}</td>}\n                                </>\n                            )}\n                        </tr>\n                    ))}\n                    </tbody>\n                </table>\n            </main>\n        </div>\n    );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","module.exports = __webpack_public_path__ + \"static/media/imcc.6aad882c.svg\";"],"sourceRoot":""}