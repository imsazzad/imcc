{"version":3,"sources":["imcc.png","App.js","reportWebVitals.js","index.js"],"names":["module","exports","App","tableData","setTableData","useState","currentTime","setCurrentTime","Date","useEffect","today","month","String","getMonth","padStart","date","getDate","fetch","then","response","json","data","catch","error","console","timer","setInterval","clearInterval","englishDate","toLocaleDateString","weekday","year","day","arabicDate","React","createElement","className","src","logo","alt","toLocaleTimeString","header1","header2","header3","rows","map","row","rowIndex","key","data-label","reportWebVitals","onPerfEntry","Function","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"iFAAAA,EAAOC,QAAU,IAA0B,kC,mLC6F5BC,MAzFf,WACI,MAAOC,EAAWC,GAAgBC,mBAAS,OACpCC,EAAaC,GAAkBF,mBAAS,IAAIG,MAEnDC,oBAAU,KACN,MAAMC,EAAQ,IAAIF,KACZG,EAAQC,OAAOF,EAAMG,WAAa,GAAGC,SAAS,EAAG,KACjDC,EAAOH,OAAOF,EAAMM,WAAWF,SAAS,EAAG,KAIjDG,MAAM,oBAAyBN,KAHXI,EAAH,WAIZG,KAAKC,GAAYA,EAASC,QAC1BF,KAAKG,GAAQjB,EAAaiB,IAC1BC,MAAMC,GAASC,QAAQD,MAAM,uBAAwBA,KAC3D,IAEHd,oBAAU,KACN,MAAMgB,EAAQC,YAAY,KACtBnB,EAAe,IAAIC,OACpB,KACH,MAAO,IAAMmB,cAAcF,IAC5B,IAEH,MAAMG,EAActB,EAAYuB,mBAAmB,QAAS,CAAEC,QAAS,OAAQC,KAAM,UAAWpB,MAAO,OAAQqB,IAAK,YAC9GC,EAAa3B,EAAYuB,mBAAmB,qBAAsB,CAAEG,IAAK,UAAWrB,MAAO,OAAQoB,KAAM,YAwB/G,OAAK5B,EAKD+B,IAAAC,cAAA,OAAKC,UAAU,OACXF,IAAAC,cAAA,OAAKC,UAAU,cACXF,IAAAC,cAAA,OAAKE,IAAKC,IAAMC,IAAI,YAAYH,UAAU,SAC1CF,IAAAC,cAAA,OAAKC,UAAU,gBAAgBR,GAE/BM,IAAAC,cAAA,OAAKC,UAAU,gBAAgB9B,EAAYkC,sBAC3CN,IAAAC,cAAA,OAAKC,UAAU,eAAeH,IAGlCC,IAAAC,cAAA,QAAMC,UAAU,YACZF,IAAAC,cAAA,SAAOC,UAAU,aACbF,IAAAC,cAAA,aACAD,IAAAC,cAAA,UACID,IAAAC,cAAA,UAAKhC,EAAUsC,SACfP,IAAAC,cAAA,UAAKhC,EAAUuC,SACdvC,EAAUwC,SAAWT,IAAAC,cAAA,UAAKhC,EAAUwC,WAGzCT,IAAAC,cAAA,aACChC,EAAUyC,KAAKC,IAAI,CAACC,EAAKC,IACtBb,IAAAC,cAAA,MAAIa,IAAKD,GACLb,IAAAC,cAAA,MAAIc,aAAY9C,EAAUsC,SAAUK,EAAI,IACxCZ,IAAAC,cAAA,MAAIc,aAAY9C,EAAUuC,SAAUI,EAAI,IACvCA,EAAI,IAAMZ,IAAAC,cAAA,MAAIc,aAAY9C,EAAUwC,SAAUG,EAAI,UA3BhEZ,IAAAC,cAAA,WAAK,eC1CLe,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlC,KAAKmC,IAAkD,IAAjD,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASL,EACpEC,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,MCDDQ,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH7B,IAAAC,cAACD,IAAM8B,WAAU,KACf9B,IAAAC,cAACjC,EAAG,QAORgD,M","file":"static/js/main.96fbc57a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/imcc.aa25fcd9.png\";","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport logo from './imcc.png'; // Import the logo\n\nfunction App() {\n    const [tableData, setTableData] = useState(null);\n    const [currentTime, setCurrentTime] = useState(new Date());\n\n    useEffect(() => {\n        const today = new Date();\n        const month = String(today.getMonth() + 1).padStart(2, '0');\n        const date = String(today.getDate()).padStart(2, '0');\n        const fileName = `${date}.json`;\n        const baseUrl = process.env.PUBLIC_URL;\n\n        fetch(`${baseUrl}/prayertime/${month}/${fileName}`)\n            .then(response => response.json())\n            .then(data => setTableData(data))\n            .catch(error => console.error('Error fetching data:', error));\n    }, []);\n\n    useEffect(() => {\n        const timer = setInterval(() => {\n            setCurrentTime(new Date());\n        }, 1000);\n        return () => clearInterval(timer);\n    }, []);\n\n    const englishDate = currentTime.toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' });\n    const arabicDate = currentTime.toLocaleDateString('en-GB-u-ca-islamic', { day: 'numeric', month: 'long', year: 'numeric' });\n\n    function convertToBanglaDate(date) {\n        const monthsInBangla = [\n            'বৈশাখ', 'জ্যৈষ্ঠ', 'আষাঢ়', 'শ্রাবণ', 'ভাদ্র', 'আশ্বিন',\n            'কার্তিক', 'অগ্রহায়ণ', 'পৌষ', 'মাঘ', 'ফাল্গুন', 'চৈত্র'\n        ];\n\n        const daysInBangla = [\n            'শনিবার', 'রবিবার', 'সোমবার', 'মঙ্গলবার', 'বুধবার', 'বৃহস্পতিবার', 'শুক্রবার'\n        ];\n\n        const numbersInBangla = ['০','১','২','৩','৪','৫','৬','৭','৮','৯'];\n\n        const day = daysInBangla[date.getDay()];\n        const month = monthsInBangla[date.getMonth()];\n        const year = date.getFullYear().toString().replace(/[0-9]/g, digit => numbersInBangla[digit]);\n        const dateOfMonth = date.getDate().toString().replace(/[0-9]/g, digit => numbersInBangla[digit]);\n\n        return `${day}, ${dateOfMonth} ${month}, ${year} বঙ্গাব্দ`;\n    }\n\n    // const banglaDate = convertToBanglaDate(currentTime);\n\n    if (!tableData) {\n        return <div>Loading...</div>;\n    }\n\n    return (\n        <div className=\"App\">\n            <div className=\"App-header\">\n                <img src={logo} alt=\"IMCC Logo\" className=\"logo\" />\n                <div className=\"date-english\">{englishDate}</div>\n\n                <div className=\"current-time\">{currentTime.toLocaleTimeString()}</div>\n                <div className=\"date-arabic\">{arabicDate}</div>\n                {/*<div className=\"date-bangla\">{banglaDate}</div>*/}\n            </div>\n            <main className=\"App-main\">\n                <table className=\"App-table\">\n                    <thead>\n                    <tr>\n                        <th>{tableData.header1}</th>\n                        <th>{tableData.header2}</th>\n                        {tableData.header3 && <th>{tableData.header3}</th>}\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {tableData.rows.map((row, rowIndex) => (\n                        <tr key={rowIndex}>\n                            <td data-label={tableData.header1}>{row[0]}</td>\n                            <td data-label={tableData.header2}>{row[1]}</td>\n                            {row[2] && <td data-label={tableData.header3}>{row[2]}</td>}\n                        </tr>\n                    ))}\n                    </tbody>\n                </table>\n            </main>\n\n        </div>\n\n    );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}