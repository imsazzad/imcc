{"version":3,"sources":["imcc.svg","App.js","reportWebVitals.js","index.js"],"names":["module","exports","App","tableData","setTableData","useState","currentTime","setCurrentTime","Date","useEffect","today","month","String","getMonth","padStart","date","getDate","fetch","then","response","json","data","catch","error","console","timer","setInterval","clearInterval","englishDate","toLocaleDateString","weekday","year","day","arabicDate","nextTimeIndex","getNextTimeIndex","currentTimeString","toTimeString","split","currentTimeInSeconds","reduce","acc","time","log","i","rows","length","rowTimeString","rowTimeInSeconds","React","createElement","className","src","logo","alt","toLocaleTimeString","header1","header2","header3","map","row","rowIndex","key","data-label","reportWebVitals","onPerfEntry","Function","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.f9666736.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/imcc.6aad882c.svg\";","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport logo from './imcc.svg'; // Import the logo\n\nfunction App() {\n    const [tableData, setTableData] = useState(null);\n    const [currentTime, setCurrentTime] = useState(new Date());\n\n    useEffect(() => {\n        const today = new Date();\n        const month = String(today.getMonth() + 1).padStart(2, '0');\n        const date = String(today.getDate()).padStart(2, '0');\n        const fileName = `${date}.json`;\n        const baseUrl = process.env.PUBLIC_URL;\n\n        fetch(`${baseUrl}/prayertime/${month}/${fileName}`)\n            .then(response => response.json())\n            .then(data => setTableData(data))\n            .catch(error => console.error('Error fetching data:', error));\n    }, []);\n\n    useEffect(() => {\n        const timer = setInterval(() => {\n            setCurrentTime(new Date());\n        }, 1000);\n        return () => clearInterval(timer);\n    }, []);\n\n    const englishDate = currentTime.toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' });\n    const arabicDate = currentTime.toLocaleDateString('en-GB-u-ca-islamic', { day: 'numeric', month: 'long', year: 'numeric' });\n\n    const getNextTimeIndex = () => {\n        if (!tableData) return -1;\n        const currentTimeString = currentTime.toTimeString().split(' ')[0];\n        const currentTimeInSeconds = currentTimeString.split(':').reduce((acc, time) => (60 * acc) + +time);\n        console.log(\"currentTimeString\", currentTimeString);\n\n\n        for (let i = 0; i < tableData.rows.length; i++) {\n            const rowTimeString = tableData.rows[i][1];\n            console.log(\"rowTimeString\", rowTimeString);\n            const rowTimeInSeconds = rowTimeString.split(':').reduce((acc, time) => (60 * acc) + +time);\n            console.log(\"rowTimeInSeconds\", rowTimeInSeconds, \"currentTimeInSeconds\", currentTimeInSeconds);\n            if (rowTimeInSeconds > currentTimeInSeconds) {\n                return i;\n            }\n        }\n        return -1;\n    };\n    const nextTimeIndex = getNextTimeIndex();\n    console.log('Next time index:', nextTimeIndex);\n\n    if (!tableData) {\n        return <div>Loading...</div>;\n    }\n\n    return (\n        <div className=\"App\">\n            <div className=\"App-header\">\n                <img src={logo} alt=\"IMCC Logo\" className=\"logo\" />\n                <div className=\"date-english\">{englishDate}</div>\n                <div className=\"current-time\">{currentTime.toLocaleTimeString()}</div>\n                <div className=\"date-arabic\">{arabicDate}</div>\n            </div>\n            <main className=\"App-main\">\n                <table className=\"App-table\">\n                    <thead>\n                    <tr>\n                        <th>{tableData.header1}</th>\n                        <th>{tableData.header2}</th>\n                        {tableData.header3 && <th>{tableData.header3}</th>}\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {tableData.rows.map((row, rowIndex) => (\n                        <tr key={rowIndex} className={rowIndex === nextTimeIndex ? 'bold-row' : ''}>\n                            <td data-label={tableData.header1}>{row[0]}</td>\n                            <td data-label={tableData.header2}>{row[1]}</td>\n                            {row[2] && <td data-label={tableData.header3}>{row[2]}</td>}\n                        </tr>\n                    ))}\n                    </tbody>\n                </table>\n            </main>\n        </div>\n    );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}