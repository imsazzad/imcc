{"version":3,"sources":["imcc.svg","App.js","reportWebVitals.js","index.js"],"names":["module","exports","App","tableData","setTableData","useState","currentTime","setCurrentTime","Date","useEffect","today","String","getMonth","padStart","getDate","fetch","then","response","json","catch","error","console","findIqamahTime","time","minutes","hours","mins","split","map","Number","date","setHours","toTimeString","slice","iqamahTimeForDhuhr","async","url","navigator","geolocation","getCurrentPosition","latitude","longitude","position","coords","ok","Error","status","timings","data","formattedData","header1","header2","header3","rows","Fajr","Sunrise","Dhuhr","Asr","Maghrib","Isha","fetchPrayerTimes","timer","setInterval","clearInterval","englishDate","toLocaleDateString","weekday","year","month","day","arabicDate","index","nextTimeIndex","timeDifference","remainingTime","prayerName","getNextTimeIndex","currentTimeInSeconds","reduce","acc","i","length","rowAdhanTimeString","rowIqamahTimeString","rowAdhanTimeInSeconds","rowIqamahTimeInSeconds","Math","abs","rowTimeString","rowTimeInSeconds","formattedRemainingTime","seconds","hrs","floor","secs","toString","formatRemainingTime","React","createElement","className","src","logo","alt","toLocaleTimeString","row","rowIndex","key","data-label","colSpan","Fragment","reportWebVitals","onPerfEntry","Function","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.5266c680.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/imcc.6aad882c.svg\";","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport logo from './imcc.svg'; // Import the logo\n// import Papa from 'papaparse';\n\nfunction App() {\n    const [tableData, setTableData] = useState(null);\n    const [currentTime, setCurrentTime] = useState(new Date());\n\n    useEffect(() => {\n        const today = new Date();\n        const month = String(today.getMonth() + 1).padStart(2, '0');\n        const date = String(today.getDate()).padStart(2, '0');\n        const fileName = `${date}.json`;\n        // console.log(fileName, month);\n        const baseUrl = process.env.PUBLIC_URL;\n\n        // console.log(`${baseUrl}/prayertime/03/abcd.json`);\n        // console.log(`${baseUrl}/prayertime/${month}/${fileName}`);\n        fetch(`${baseUrl}/prayertime/03/20.json`)\n            .then(response => response.json())\n            .catch(error => console.error('Error fetching data:', error));\n\n        const findIqamahTime = (time, minutes) => {\n            const [hours, mins] = time.split(':').map(Number);\n            const date = new Date();\n            date.setHours(hours, mins + minutes);\n            return date.toTimeString().split(' ')[0].slice(0, 5);\n        };\n\n        const iqamahTimeForDhuhr = (time) => {\n            const [hours, mins] = time.split(':').map(Number);\n            if (hours < 12 || (hours === 12 && mins < 50)) {\n                return \"12:50\";\n            } else {\n                return \"13:50\";\n            }\n        };\n\n        const fetchPrayerTimes = async () => {\n            let url = 'http://api.aladhan.com/v1/timingsByCity?city=Dublin&country=Ireland&method=2';\n            if (navigator.geolocation) {\n                navigator.geolocation.getCurrentPosition(\n                    async (position) => {\n                        const { latitude, longitude } = position.coords;\n                        url = `http://api.aladhan.com/v1/timings?latitude=${latitude}&longitude=${longitude}&method=2`;\n                        try {\n                            const response = await fetch(url);\n                            if (!response.ok) {\n                                throw new Error(`HTTP error! status: ${response.status}`);\n                            }\n                            const data = await response.json();\n                            const timings = data.data.timings;\n\n                            const formattedData = {\n                                header1: \"PRAYER\",\n                                header2: \"ADHAN\",\n                                header3: \"IQAMAH\",\n                                rows: [\n                                    [\"FAJR\", timings.Fajr, findIqamahTime(timings.Fajr, 20)],\n                                    [\"SUNRISE\", timings.Sunrise, \"\"],\n                                    [\"DHUHR\", timings.Dhuhr, iqamahTimeForDhuhr(timings.Dhuhr)],\n                                    [\"ASR\", timings.Asr, findIqamahTime(timings.Asr, 10)],\n                                    [\"MAGHRIB\", timings.Maghrib, findIqamahTime(timings.Maghrib, 10)],\n                                    [\"ISHA\", timings.Isha, findIqamahTime(timings.Isha, 20)]\n                                ]\n                            };\n\n                            setTableData(formattedData);\n                        } catch (error) {\n                            console.error('Error fetching data:', error);\n                        }\n                    },\n                    async (error) => {\n                        console.error('Error getting location:', error);\n                        try {\n                            const response = await fetch(url);\n                            if (!response.ok) {\n                                throw new Error(`HTTP error! status: ${response.status}`);\n                            }\n                            const data = await response.json();\n                            const timings = data.data.timings;\n\n                            const formattedData = {\n                                header1: \"PRAYER\",\n                                header2: \"ADHAN\",\n                                header3: \"IQAMAH\",\n                                rows: [\n                                    [\"FAJR\", timings.Fajr, findIqamahTime(timings.Fajr, 20)],\n                                    [\"SUNRISE\", timings.Sunrise, \"\"],\n                                    [\"DHUHR\", timings.Dhuhr, iqamahTimeForDhuhr(timings.Dhuhr)],\n                                    [\"ASR\", timings.Asr, findIqamahTime(timings.Asr, 10)],\n                                    [\"MAGHRIB\", timings.Maghrib, findIqamahTime(timings.Maghrib, 10)],\n                                    [\"ISHA\", timings.Isha, findIqamahTime(timings.Isha, 20)]\n                                ]\n                            };\n\n                            setTableData(formattedData);\n                        } catch (error) {\n                            console.error('Error fetching data:', error);\n                        }\n                    }\n                );\n            } else {\n                try {\n                    const response = await fetch(url);\n                    if (!response.ok) {\n                        throw new Error(`HTTP error! status: ${response.status}`);\n                    }\n                    const data = await response.json();\n                    const timings = data.data.timings;\n\n                    const formattedData = {\n                        header1: \"PRAYER\",\n                        header2: \"ADHAN\",\n                        header3: \"IQAMAH\",\n                        rows: [\n                            [\"FAJR\", timings.Fajr, findIqamahTime(timings.Fajr, 20)],\n                            [\"SUNRISE\", timings.Sunrise, \"\"],\n                            [\"DHUHR\", timings.Dhuhr, iqamahTimeForDhuhr(timings.Dhuhr)],\n                            [\"ASR\", timings.Asr, findIqamahTime(timings.Asr, 10)],\n                            [\"MAGHRIB\", timings.Maghrib, findIqamahTime(timings.Maghrib, 10)],\n                            [\"ISHA\", timings.Isha, findIqamahTime(timings.Isha, 20)]\n                        ]\n                    };\n\n                    setTableData(formattedData);\n                } catch (error) {\n                    console.error('Error fetching data:', error);\n                }\n            }\n        };\n\n        // Ensure the promise is handled\n        fetchPrayerTimes();\n\n    }, []);\n\n    useEffect(() => {\n        const timer = setInterval(() => {\n            setCurrentTime(new Date());\n        }, 1000);\n        return () => clearInterval(timer);\n    }, []);\n\n    const englishDate = currentTime.toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' });\n    const arabicDate = currentTime.toLocaleDateString('en-GB-u-ca-islamic', { day: 'numeric', month: 'long', year: 'numeric' });\n\n    const getNextTimeIndex = () => {\n        if (!tableData) return -1;\n        const currentTimeString = currentTime.toTimeString().split(' ')[0];\n        const currentTimeInSeconds = currentTimeString.split(':').reduce((acc, time) => (60 * acc) + +time);\n\n\n        for (let i = 0; i < tableData.rows.length; i++) {\n            const rowAdhanTimeString = tableData.rows[i][1] + \":00\";\n            const rowIqamahTimeString = tableData.rows[i][2] + \":00\";\n            const prayerName = tableData.rows[i][0];\n            const rowAdhanTimeInSeconds = rowAdhanTimeString.split(':').reduce((acc, time) => (60 * acc) + +time);\n            const rowIqamahTimeInSeconds = rowIqamahTimeString.split(':').reduce((acc, time) => (60 * acc) + +time);\n            if (rowAdhanTimeInSeconds > currentTimeInSeconds) {\n                const timeDifference = Math.abs(rowAdhanTimeInSeconds - currentTimeInSeconds);\n                return { index: i, timeDifference, prayerName:prayerName };\n                // return i;\n            }\n            else if (rowAdhanTimeInSeconds < currentTimeInSeconds &&  rowIqamahTimeInSeconds > currentTimeInSeconds) {\n                const timeDifference = Math.abs(rowIqamahTimeInSeconds - currentTimeInSeconds);\n                return { index: i, timeDifference, prayerName: `${prayerName} IQAMAH` };\n            }\n        }\n\n        // because after Isha finish it should show fajr time, first row\n        const rowTimeString = tableData.rows[0][1] + \":00\";\n        const prayerName = tableData.rows[0][0];\n        const rowTimeInSeconds = rowTimeString.split(':').reduce((acc, time) => (60 * acc) + +time);\n        const timeDifference = \"24:00:00\".split(':').reduce((acc, time) => (60 * acc) + +time) + rowTimeInSeconds - currentTimeInSeconds;\n        return { index: 0, timeDifference, prayerName:prayerName };\n\n    };\n\n    const { index: nextTimeIndex, timeDifference: remainingTime, prayerName} = getNextTimeIndex();\n\n    const formatRemainingTime = (seconds) => {\n        const hrs = Math.floor(seconds / 3600);\n        const mins = Math.floor((seconds % 3600) / 60);\n        const secs = seconds % 60;\n        return `${hrs.toString().padStart(2, '0')}:${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n    };\n\n    const formattedRemainingTime = formatRemainingTime(remainingTime);\n\n    // console.log(\"formattedRemainingTime\", formattedRemainingTime, prayerName);\n\n\n    if (!tableData) {\n        return <div>Prayer Time Not Available.</div>;\n    }\n\n    return (\n        <div className=\"App\">\n            <div className=\"App-header\">\n                <img src={logo} alt=\"IMCC Logo\" className=\"logo\" />\n                <div className=\"date-english\">{englishDate}</div>\n                <div className=\"current-time\">{currentTime.toLocaleTimeString()}</div>\n                <div className=\"date-arabic\">{arabicDate}</div>\n                <div className=\"remaining-time\">{prayerName}  {formattedRemainingTime}</div>\n            </div>\n            <main className=\"App-main\">\n                <table className=\"App-table\">\n                    <thead>\n                    <tr>\n                        <th>PRAYER</th>\n                        <th>ADHAN</th>\n                        <th>IQAMAH</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {tableData.rows.map((row, rowIndex) => (\n                        <tr key={rowIndex} className={rowIndex === nextTimeIndex ? 'bold-colored-row' : ''}>\n                            <td data-label={tableData.header1}>{row[0]}</td>\n                            {rowIndex === 1 ? (\n                                <td data-label={tableData.header2} colSpan=\"2\">{row[1]}</td>\n                            ) : (\n                                <>\n                                    <td data-label={tableData.header2}>{row[1]}</td>\n                                    {row[2] && <td data-label={tableData.header3}>{row[2]}</td>}\n                                </>\n                            )}\n                        </tr>\n                    ))}\n                    </tbody>\n                </table>\n            </main>\n        </div>\n    );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}